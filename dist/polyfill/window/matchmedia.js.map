{"version":3,"sources":["polyfill/window/matchmedia.js"],"names":["global","document","getComputedStyle","definition","iterate","onResize","mql","event","i","fn","storage","key","query","matches","check","currentTarget","media","srcElement","target","timestamp","Date","type","listener","call","initialize","getElementsByTagName","style","createElement","setAttribute","id","parentNode","insertBefore","addEventListener","Query","self","this","index","count","String","source","addListener","push","removeListener","pointer","splice","prototype","textContent","zIndex","matchMedia","provide"],"mappings":"CAMC,SAASA,EAAQC,EAAUC,GAC3B,YAEA,SAASC,GAAWC,GAKnB,QAASC,KACR,GAAIC,GAAKC,EAAOC,EAAGC,CAEnBL,GAAQM,EAAS,SAASC,EAAKC,GAG9B,GAFAN,EAAQM,EAAMN,IAEXA,EAAIO,UAAYD,EAAME,QAWxB,IAVAP,GACCQ,cAAeT,EACfO,QAAeP,EAAIO,QACnBG,MAAeV,EAAIU,MACnBC,WAAeX,EACfY,OAAeZ,EACfa,WAAgB,GAAIC,MACpBC,KAAe,UAGZb,EAAI,EAAGC,EAAKG,EAAMU,SAASd,GAAIA,IAClCC,EAAGc,KAAKjB,EAAKC,KAMjB,QAASiB,KACR,GAAIN,GAASjB,EAASwB,qBAAqB,UAAU,EAErDC,GAAczB,EAAS0B,cAAc,SACrCD,EAAML,KAAQ,WAEdK,EAAME,aAAa,iBAAkBC,GACrCH,EAAME,aAAa,QAAS,6EAE5BV,EAAOY,WAAWC,aAAaL,EAAOR,GAEtClB,EAAOgC,iBAAiB,SAAU3B,GAClCL,EAAOgC,iBAAiB,oBAAqB3B,GAG9C,QAAS4B,GAAMrB,GACd,GAAIsB,GAAWC,KACdC,EAAWC,EAAQ,EACnBf,IAEDY,GAAKE,MAAWE,OAAOF,GACvBF,EAAKK,OAAW,UAAY3B,EAAQ,uBAAyBiB,EAAK,iBAAmBO,EAAQ,QAC7FF,EAAKZ,SAAWA,EAChBY,EAAK5B,KACJO,SAAgB,EAChBG,MAAgBJ,EAChB4B,YAAgB,SAAqB/B,GAAMA,GAAMa,EAASmB,KAAKhC,IAC/DiC,eAAgB,SAAwBjC,GAIvC,IAHA,GACCkC,GADGnC,EAAI,EAGFmC,EAAUrB,EAASd,GAAIA,IAC5B,GAAGmC,IAAYlC,EAAI,CAClBa,EAASsB,OAAOpC,EAAG,EAEnB,UAMJ6B,IAEAH,EAAKpB,QAvEN,GAEYY,GAFRG,EAAU,6BACbnB,KACA2B,EAAQ,CAmGT,OA3BAJ,GAAMY,WAOL/B,MAAO,WACN,GACCD,GADGqB,EAAOC,IAOX,OAJAT,GAAMoB,YAAcZ,EAAKK,OACzB1B,EAAoByB,OAAOpC,EAAiBwB,GAAOqB,UAAYb,EAAKE,MACpEV,EAAMoB,YAAc,GAEZZ,EAAK5B,IAAIO,QAAUA,IAIxB,cAAgBb,KACpBwB,IAEAxB,EAAOgD,WAAa,SAAkCpC,GACrD,OAAQF,EAAQE,KAAWF,EAAQE,GAAS,GAAIqB,GAAMrB,KAASN,MAI1DN,EAAOgD,WAGfC,SAAU,4BAA8B9C,IACvCgC,KAAMlC,SAAUC","file":"matchmedia.js","sourcesContent":["/**\n * @use /demand/function/iterate\n *\n * @browsers Chrome < 9, Firefox < 6, Internet Explorer < 10, Opera < 12.1, Safari < 5.1\n */\n\n(function(global, document, getComputedStyle) {\n\t'use strict';\n\n\tfunction definition(iterate) {\n\t\tvar id      = 'polyfill/window/matchmedia',\n\t\t\tstorage = {},\n\t\t\tcount = 0, style;\n\n\t\tfunction onResize() {\n\t\t\tvar mql, event, i, fn;\n\n\t\t\titerate(storage, function(key, query) {\n\t\t\t\tmql   = query.mql;\n\n\t\t\t\tif(mql.matches !== query.check()) {\n\t\t\t\t\tevent = {\n\t\t\t\t\t\tcurrentTarget: mql,\n\t\t\t\t\t\tmatches:       mql.matches,\n\t\t\t\t\t\tmedia:         mql.media,\n\t\t\t\t\t\tsrcElement:    mql,\n\t\t\t\t\t\ttarget:        mql,\n\t\t\t\t\t\ttimestamp:     +new Date(),\n\t\t\t\t\t\ttype:          'change'\n\t\t\t\t\t};\n\n\t\t\t\t\tfor(i = 0; fn = query.listener[i]; i++) {\n\t\t\t\t\t\tfn.call(mql, event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction initialize() {\n\t\t\tvar target = document.getElementsByTagName('script')[0];\n\n\t\t\tstyle       = document.createElement('style');\n\t\t\tstyle.type  = 'text/css';\n\n\t\t\tstyle.setAttribute('nucleus-source', id);\n\t\t\tstyle.setAttribute('style', 'display: none; position: absolute; width: 0; height: 0; overflow: hidden;');\n\n\t\t\ttarget.parentNode.insertBefore(style, target);\n\n\t\t\tglobal.addEventListener('resize', onResize);\n\t\t\tglobal.addEventListener('orientationchange', onResize);\n\t\t}\n\n\t\tfunction Query(query) {\n\t\t\tvar self     = this,\n\t\t\t\tindex    = count + 1,\n\t\t\t\tlistener = [];\n\n\t\t\tself.index    = String(index);\n\t\t\tself.source   = '@media ' + query + ' { [nucleus-source=\"' + id + '\"] { z-index: ' + index + '; } }';\n\t\t\tself.listener = listener;\n\t\t\tself.mql      = {\n\t\t\t\tmatches:        false,\n\t\t\t\tmedia:          query,\n\t\t\t\taddListener:    function addListener(fn) { fn && listener.push(fn); },\n\t\t\t\tremoveListener: function removeListener(fn) {\n\t\t\t\t\tvar i = 0,\n\t\t\t\t\t\tpointer;\n\n\t\t\t\t\tfor(; pointer = listener[i]; i++) {\n\t\t\t\t\t\tif(pointer === fn) {\n\t\t\t\t\t\t\tlistener.splice(i, 1);\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tcount++;\n\n\t\t\tself.check();\n\t\t}\n\n\t\tQuery.prototype = {\n\t\t\t/* only for reference\n\t\t\tindex:    null,\n\t\t\tsource:   null,\n\t\t\tlistener: null,\n\t\t\tmql:      null,\n\t\t\t*/\n\t\t\tcheck: function() {\n\t\t\t\tvar self = this,\n\t\t\t\t\tmatches;\n\n\t\t\t\tstyle.textContent = self.source;\n\t\t\t\tmatches           = String(getComputedStyle(style).zIndex) === self.index;\n\t\t\t\tstyle.textContent = '';\n\n\t\t\t\treturn (self.mql.matches = matches);\n\t\t\t}\n\t\t};\n\n\t\tif(!('matchMedia' in global)) {\n\t\t\tinitialize();\n\n\t\t\tglobal.matchMedia = function polyfillWindowMatchmedia(query) {\n\t\t\t\treturn (storage[query] || (storage[query] = new Query(query))).mql;\n\t\t\t};\n\t\t}\n\n\t\treturn global.matchMedia;\n\t}\n\n\tprovide([ '/demand/function/iterate' ], definition);\n}(this, document, getComputedStyle));"]}