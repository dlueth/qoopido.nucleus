{"version":3,"sources":["task.js"],"names":["global","provide","abstractUuid","Pledge","isInstanceOf","defer","supportMethod","worker","ArrayBuffer","NativeWorker","NativeUrl","NativeBlob","supported","threads","idle","busy","queue","i","processQueue","task","thread","length","shift","uuid","addEventListener","onMessage","onError","postMessage","load","toString","parameter","deferred","resolve","apply","exception","reject","disposeTask","removeEventListener","push","Task","self","call","this","pledge","prototype","event","data","type","result","createObjectURL","extends"],"mappings":"CASC,SAASA,GACT,aAwGAC,SAAU,wBAAyB,iBAAkB,iCAAkC,yBAA0B,oBAtGjH,SAAoBC,EAAcC,EAAQC,EAAcC,EAAOC,GAC9D,IASCC,EATGC,EAAe,gBAAiBR,EAASQ,EAAc,KAC1DC,EAAeH,EAAc,UAC7BI,EAAeJ,EAAc,OAC7BK,EAAeL,EAAc,QAC7BM,EAAeH,GAAgBC,GAAaC,EAG5CE,GAAiBC,QAAUC,SAC3BC,KACQC,EAAI,EAEb,SAASC,IACR,IAAIC,EAAMC,GAEPJ,EAAMK,QAAYT,IAAaC,EAAQC,KAAKO,SAC9CF,EAAOH,EAAMM,QAEVV,GACFQ,EAASP,EAAQC,KAAKQ,QAEtBT,EAAQE,KAAKI,EAAKI,MAAQH,EAE1BA,EAAOI,iBAAiB,UAAWL,EAAKM,WACxCL,EAAOI,iBAAiB,QAASL,EAAKO,SACtCN,EAAOO,aAAcC,KAAMT,EAAKS,KAAKC,WAAYC,UAAWX,EAAKW,WAAatB,GAAeJ,EAAae,EAAKW,UAAWtB,IAAiBW,EAAKW,WAAc,OAE9JzB,EAAM,WACL,IACCc,EAAKY,SAASC,QAAQb,EAAKS,KAAKK,MAAM,KAAMd,EAAKW,YAChD,MAAMI,GACPf,EAAKY,SAASI,SAGfjB,OAMJ,SAASkB,EAAYjB,GACpB,IAAIC,EAASP,EAAQE,KAAKI,EAAKI,aAExBV,EAAQE,KAAKI,EAAKI,MAEzBH,EAAOiB,oBAAoB,UAAWlB,EAAKM,WAC3CL,EAAOiB,oBAAoB,QAASlB,EAAKO,SACzCb,EAAQC,KAAKwB,KAAKlB,GAClBF,IAGD,SAASqB,EAAKX,EAAME,GACnB,IAAIU,EAAWtC,EAAauC,KAAKC,MAChCX,EAAW5B,EAAOE,QASnB,OAPAmC,EAAKT,SAAYA,EACjBS,EAAKZ,KAAYA,EACjBY,EAAKV,UAAYA,MAEjBd,EAAMsB,KAAKE,GACXtB,IAEOa,EAASY,OAyBjB,GAtBAJ,EAAKK,WAMJnB,UAAW,SAASoB,GAGI,WAApBA,EAAMC,KAAKC,OAFHL,KAGLX,SAASC,QAAQa,EAAMC,KAAKE,QACjCZ,EAJUM,QAOZhB,QAAS,WACGgB,KAENX,SAASI,SACdC,EAHWM,QAOV9B,EACF,IAGC,IAFAL,EAASG,EAAUuC,gBAAgB,IAAItC,GAlFzB,8ZAkFkDoC,KAAM,4BAEhE9B,EAAI,EAAGA,IACZJ,EAAQC,KAAKG,GAAK,IAAIR,EAAaF,GAEnC,MAAM2B,GACPtB,GAAY,EAId,OAAO2B,EAAKW,QAAQhD,KAtGtB,CA0GEwC","file":"task.js","sourcesContent":["/**\n * @use /demand/abstract/uuid\n * @use /demand/pledge\n * @use /demand/validator/isInstanceOf\n * @use /demand/function/defer\n *\n * @require ./support/method\n */\n\n(function(global) {\n\t'use strict';\n\n\tfunction definition(abstractUuid, Pledge, isInstanceOf, defer, supportMethod) {\n\t\tvar ArrayBuffer  = 'ArrayBuffer' in global ? ArrayBuffer : null,\n\t\t\tNativeWorker = supportMethod('Worker'),\n\t\t\tNativeUrl    = supportMethod('URL'),\n\t\t\tNativeBlob   = supportMethod('Blob'),\n\t\t\tsupported    = NativeWorker && NativeUrl && NativeBlob,\n\t\t\t// eslint-disable-next-line no-useless-escape\n\t\t\tsource       = 'function d(a){return a.replace(c,\"\").trim()}function e(a){return a}var a=this,b=/function\\s.*?\\(([^)]*)\\)/,c=/\\/\\*.*\\*\\//;a.addEventListener(\"message\",function(b){a.postMessage({type:\"result\",result:a.process(b.data.load).apply(null,b.data.parameter)})},!1),a.process=function(a){var c=a.match(b)[1].split(\",\").map(d).filter(e);return c.push(a.substring(a.indexOf(\"{\")+1,a.lastIndexOf(\"}\"))),Function.apply(null,c)};',\n\t\t\tthreads      = { idle: [], busy: {} },\n\t\t\tqueue        = [],\n\t\t\tworker, i = 0;\n\n\t\tfunction processQueue() {\n\t\t\tvar task, thread;\n\n\t\t\tif(queue.length && (!supported || threads.idle.length)) {\n\t\t\t\ttask = queue.shift();\n\n\t\t\t\tif(supported) {\n\t\t\t\t\tthread = threads.idle.shift();\n\n\t\t\t\t\tthreads.busy[task.uuid] = thread;\n\n\t\t\t\t\tthread.addEventListener('message', task.onMessage);\n\t\t\t\t\tthread.addEventListener('error', task.onError);\n\t\t\t\t\tthread.postMessage({ load: task.load.toString(), parameter: task.parameter }, ArrayBuffer && isInstanceOf(task.parameter, ArrayBuffer) ? [ task.parameter ] : null);\n\t\t\t\t} else {\n\t\t\t\t\tdefer(function(){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttask.deferred.resolve(task.load.apply(null, task.parameter));\n\t\t\t\t\t\t} catch(exception) {\n\t\t\t\t\t\t\ttask.deferred.reject();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tprocessQueue();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction disposeTask(task) {\n\t\t\tvar thread = threads.busy[task.uuid];\n\n\t\t\tdelete threads.busy[task.uuid];\n\n\t\t\tthread.removeEventListener('message', task.onMessage);\n\t\t\tthread.removeEventListener('error', task.onError);\n\t\t\tthreads.idle.push(thread);\n\t\t\tprocessQueue();\n\t\t}\n\n\t\tfunction Task(load, parameter) {\n\t\t\tvar self     = abstractUuid.call(this),\n\t\t\t\tdeferred = Pledge.defer();\n\n\t\t\tself.deferred  = deferred;\n\t\t\tself.load      = load;\n\t\t\tself.parameter = parameter || [];\n\n\t\t\tqueue.push(self);\n\t\t\tprocessQueue();\n\n\t\t\treturn deferred.pledge;\n\t\t}\n\n\t\tTask.prototype = {\n\t\t\t/* only for reference\n\t\t\tdeferred:  null,\n\t\t\tload:      null,\n\t\t\tparameter: null,\n\t\t\t*/\n\t\t\tonMessage: function(event) {\n\t\t\t\tvar self = this;\n\n\t\t\t\tif(event.data.type === 'result') {\n\t\t\t\t\tself.deferred.resolve(event.data.result);\n\t\t\t\t\tdisposeTask(self);\n\t\t\t\t}\n\t\t\t},\n\t\t\tonError: function() {\n\t\t\t\tvar self = this;\n\n\t\t\t\tself.deferred.reject();\n\t\t\t\tdisposeTask(self);\n\t\t\t}\n\t\t};\n\n\t\tif(supported) {\n\t\t\ttry {\n\t\t\t\tworker = NativeUrl.createObjectURL(new NativeBlob([ source ], { type: 'application/javascript' }));\n\n\t\t\t\tfor(; i < 4; i++) {\n\t\t\t\t\tthreads.idle[i] = new NativeWorker(worker);\n\t\t\t\t}\n\t\t\t} catch(exception) {\n\t\t\t\tsupported = false;\n\t\t\t}\n\t\t}\n\n\t\treturn Task.extends(abstractUuid);\n\t}\n\n\tprovide([ '/demand/abstract/uuid', '/demand/pledge', '/demand/validator/isInstanceOf', '/demand/function/defer', './support/method' ],definition);\n}(this));\n"]}